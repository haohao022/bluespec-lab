/*

Copyright (C) 2012

Muralidaran Vijayaraghavan <vmurali@csail.mit.edu>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

simulator: Contains the SMIPS processor simulator files. This processor implements only a subset of SMIPS ISA, which itself is a subset of MIPS ISA
    lib: Contains the common files accross different variations of the processor
    procs: Contains the various types of processors that can be instantated
    README: README giving the order in which the various processor codes should be read

programs: Contains the various programs (assembly and C) that can be run on the SMIPS processor.
    src: Contains the various C and assembly source codes. Assembly source codes are in the tests subdirectory, which C codes are in the respective directories
    build: Contains the .vmh files for the C and assembly programs. The .vmh file is used to load the memory of the simulator
    lib: Contains support in the form of functions for printing and indicating if a test has passed or failed. These functions access COP0 registers

doc-smips-isa: Contains the SMIPS ISA documentation and the subset supported by the processor

compiler: Contains the original SMIPS compiler written by Mark Hampton. Highly deprecated
    (use MIPS cross-compiled GCC for compiling new C code. The original SMIPS compiler need to be used only for compiling the JAL assembly test bench. JAL assembly test bench fails with the full MIPS GCC compiler because JAL instruction gets substituted by an unimplemented BAL instruction)

utility-bins: Contains various utility scripts
    smips: The script for building a simulator, compiling a program in SMIPS ISA and to run the program in the compiled simulator. The build/compile/run steps are optional, but for running, you have to build and compile at least one simulator and program respectively. You can also use this script to clean the build directory (-d)
           $ smips -b [relative-]path-to-simulator -c [relative-]path-to-program -r
           $ smips -d #removes ${SMIPS_BUILD} direcrtory
       Eg:
           $ cd $SMIPS_HOME/simulator
           $ smips -b procs/Unpipelined/1cyc.bsv -c ../programs/src/median -r
    objdump2vmh.pl: Converts a .dump file (got during the compilation process) into a .vmh file which is used to load the memory
    redirect: A very useful script to log both stderr and stdout while keeping stderr in the terminal. The stderr and stdout outputs dont get mangled in the log (which is the usual way). Finally, only when the program finishes, the whole program exits.

setup.sh: Sets the ${SMIPS_HOME} and ${SMIPS_BUILD} variables. Change it to your needs and invoke in bash
    bash$ source ./setup.sh
    Personally I hate setting any environment variables or paths. This is the only variable I set, the alternative being setting ${SMIPS_HOME} in every script that uses it in utility-bins. I thought of doing that, but then people would complain about modifying it in 6 files, so decided to set this variable. I am not setting a path to ${SMIPS_HOME}/utility-bins, though that might not be a bad idea, if you don't mind polluting your path.

To obtain the GCC cross compiler easily:
    The standard way is to compile it yourself. I would never recommend anyone going through this torture. Some folks at Emdebian have started maintaining precompiled binaries for x86, x86_64 machines. To obtain the cross compiler from them, do the following (on a debian, and possibly ubuntu machine, assuming sudo is installed and you have permissions):
    $ sudo apt-get install emdebian-archive-keyring
    $ sudo echo "deb http://www.emdebian.org/debian squeeze main" > /etc/apt/sources.list
    $ sudo apt-get install gcc-4.4-mips-linux-gnu libc6-dev-mips-cross

