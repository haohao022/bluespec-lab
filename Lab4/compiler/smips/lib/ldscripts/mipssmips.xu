OUTPUT_FORMAT("elf32-bigmips", "elf32-bigmips",
	      "elf32-bigmips")
OUTPUT_ARCH(mips)
ENTRY(__start)
 /* For some reason, the Solaris linker makes bad executables
  if gld -r is used and the intermediate file has sections starting
  at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
  bug.  But for now assigning the zero vmas works.  */
SECTIONS
{
  /* Read-only sections, merged into text segment: */
  .init        0 : { *(.init)	} =0
  .text    0 :
  {
    *(.text)
    *(.stub)
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
  } =0
  .fini    0 : { *(.fini)    } =0
  .rodata  0 : {  *(.rodata) *(.gnu.linkonce.r*) }
  .rodata1 0 : { *(.rodata1) }
  .data  0 :
  {
    *(.data)
    *(.gnu.linkonce.d*)
    CONSTRUCTORS
  }
  .data1 0 : { *(.data1) }
  .ctors       0 : { *(.ctors)   }
  .dtors       0 : { *(.dtors)   }
  .got         0 :
  {
    *(.got.plt) *(.got)
   }
  /* We want the small data sections together, so single-instruction offsets
     can access them all, and initialized data all before uninitialized, so
     we can shorten the on-disk segment size.  */
  .sdata   0 : { *(.sdata) }
  .sbss    0 : { *(.sbss) *(.scommon) }
  .bss     0 :
  {
   *(.dynbss)
   *(.bss)
   *(COMMON)
  }
  .reginfo     0 : { *(.reginfo) }
  /* These are needed for ELF backends which have not yet been
     converted to the new style linker.  */
  .stab 0 : { *(.stab) }
  .stabstr 0 : { *(.stabstr) }
  /* These must appear regardless of .  */
  .gptab.sdata : { *(.gptab.data) *(.gptab.sdata) }
  .gptab.sbss : { *(.gptab.bss) *(.gptab.sbss) }
}
